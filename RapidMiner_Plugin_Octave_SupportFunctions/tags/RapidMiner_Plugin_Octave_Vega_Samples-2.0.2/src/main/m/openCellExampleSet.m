%% function [levelEncoded_data name role level]=openCellExampleSet(cellExampleSet)
% 
% This function extracts the data from the given cell generated by Octave
% extension for Rapidminer. It also checks that the cell is well-formed.
% Below we suppose that the ExampleSet has M examples and N attributes.
%
% INPUTS:
%           cellExampleSet : a {3xN} cell.
%                Row 1:  attribute names: each of the N entries is a string 
%                Row 2:  attribute roles: each of the N entries is a string
%                        or empty.
%                Row 3:  attribute data: each entry is a Mx1 array or a Mx1
%                        cell. In such case this means that the attribute
%                        is nominal
%
% OUTPUTS:
%          name: 
%                   a 1xN cell containing the attribute names
%          role: 
%                   a 1xN cell containing the attribute roles (such as
%                   'regular', 'weight', 'label', etc.). Might be empty.
%
%          levelEncoded_data: 
%                   a MxN array containing the whole example set with all
%                   attributes encoded as numeric values. Numeric
%                   attributes' contents are taken as is, whereas for
%                   nominal attributes a dictionary of possible levels is
%                   created automatically and stored in 'level'. In such
%                   case the corresponding column in levelEncoded_data
%                   contains the indices of the attribute values in the
%                   corresponding dictionary
%          level:
%                   a 1xN cell containing the dictionary created for the
%                   nominal attributes. The dictionary may be empty (for
%                   numeric attributes), or may be a cell (general case
%                   where the levels are strings arrays), or may be an
%                   array (for nominal attributes with numeric levels).
%
%
% Authors: Yaoyu Zhang, Sylvain Marié
% Last modified: 23/07/12
%% 
function [levelEncoded_data name role level]=openCellExampleSet(cellExampleSet);

%% prepare output
nbExamples = size(cellExampleSet{3,1},1);
nbAttributes = size(cellExampleSet,2);

levelEncoded_data =zeros(nbExamples, nbAttributes);
name=cellExampleSet(1,:);
role=cellExampleSet(2,:);
level = cell(1,nbAttributes);

%% for each attribute
for i = 1 : nbAttributes
    
    % check data size
    if (nbExamples ~= size(cellExampleSet{3,i},1));
        error(['All attributes should contain the same number of examples. Offending attribute ' cellExampleSet{1,i}]);
    end
    
    
    if cellfun ( @iscell, cellExampleSet(3,i)) == 0;
        % ARRAY = numeric attribute
        disp(['Data of attribute ' cellExampleSet{1,i} ' is numerical'])

        % dont encode the data
        levelEncoded_data(:,i) = cellExampleSet{3,i};
        level{i}=[];
        
    else
        % CELL = nominal attribute
        disp(['Data of attribute ' cellExampleSet{1,i} ' is nominal. Creating the dictionary of attribute levels'])
        
        % create the dictionary of unique nominal levels
        [C indexIn indexOut]=unique(cellExampleSet{3,i});
        
        % encode the data and save the dictionary in "levels"
        levelEncoded_data(:,i)=indexOut;
        level{i}=C;
    end
    
end


end
